itaygil35, 316385962
guy_orlinsky, 318421716


1. Explanation for the differences in the first to second UML diagram- 
  # In the first design we thought about doing a class Trunk which the class 
    Tree will hold instance's of it. 
   After we tried to do it at that way we relized that it will demand from us to hold inside tree 
   class an array of Trunks,
   threfore we design differently and just make inside the create function of tree a random amount 
   of block above each over in a random x cordinate's about each over which all of them together
   is a trunk and we directly added it to the gameobjects collection.
   in addition we made the same thing with the leaves instand of holding instance of them and by 
   that the tree class create all the fram and just manage each "instace" in each location.


2. Explanation of how we have made our world infinite-
   To create an "infinite" world effectively we worked in a certain way for each object in the game -

   # For the Avatar we placed the camera to follow it therefore throughout the game the avatar will
     appear in the center of the screen and the camera will move with it.
   # For the day - night objects and the counter - energy object,
     we set them to move with the camera and thus not be left behind if the camera moves.
   # Creating all the ground and trees with the start of the game will be inefficient.
     Therefore we chose an initial range in which we will create this and according to the movement of the
     camera we changed the existing range.
     The decision whether to create or remove ground and trees depends on the windows dimensions,
     the location of the camera (which moves with the avatar) and the range that currently exists.
     At each time point in the game we check two conditions-
     If the avatar moves to the right and gets close to the right border of the existing ground,
     (before we see it on the screen) we will create more ground and trees on the right and increase the right
     bound.
     To reduce the amount of game objects at a given moment we will remove ground and trees on the left side.
     We will do the same if the avatar moves to the left.
     In addition, we want our world to be consistent. Because we remove and add the ground and trees
     throughout the game we will want to keep the trees structure and ground height at each coordinate.
     During the game we use randomness to create objects.
     But if we choose the same seed for random objects they will produce exactly the same series of numbers.
     Therefore, for each X - coordinate in the game, we sent an unique seed that depends on
     the X - coordinate value and the initial seed of the game.
     Thus we get that objects created in a particular X - coordinate will be created in exactly the same way
     if they will be created again.


3. Explanation of the way we chose to implement the trees package, and why-
   The 'trees' package should contain all the classes related to the creation of the trees in the game.
   Although the right thing to work on and that at the most of the case's divide the code into small parts of differnt
   responsibilities is better.
   we thinks that at this case it's diferrent and that's why we decide to create all the frame of the tree's and the
   leef inside the tree class create function.
   # The trees class is responsible for creating the tree trunks from game blocks and fill it with leaves, by defult
   the tree class should fill each tree in a simetric square which its size is in some relative of the trunk size but
   the tree class before craeting each instance of leaf chack if its
	Y cordinats its not under the ground Y cordinate in each X and if so we will not create there a leaf.
   # A leaf class that is responsible for creating a single leaf with all the features and transitions
     required in the exercise.
 

   Eventually we create Tree class which responsible for the creation and management the trees.
   The creation of the trees is done by assembling all the game objects we have presented, therefore there is
   a separate class for this.


4. Explanation about dilemmas or design decisions during the work-

   # At start we thought to create the leaf in the same strategy of the other game objects (By calling to
    static create function). Then we understood that we want to change the leaf behavior when it collision in
    other objects. We thought that the best way to do it is to override the onCollision function
    and therefore we decide the leaf will inherit from gameObject class.

   # We have a dilemma if to the divide the tree's package into small parts of classes which each responsible to
    specific responsibillity at the end, we decide that at this case its not neccrsery and the tree create class
    will be in charge about all the frame managmant and the leaf class on the leaves.
   # we have a dillema if overriding the update function of PepseGameManager in order to manage all the work with
   counter energy or to make an instance counter inside avatr and by that we doing all the counter update inside the
   avatar update function, at the end we was needed to override anyway the PepseGameManager update function for
   managing the infinite world but we still found this way more logical.

5. Explanation about the bonus-
   We chose adding to the game an energy counter that shows on the screen the amount of energy the bear has
   at any given moment in the game.
   To implement this, we created a new class in the 'world' package that extends the Game Object class.
   This class represents a Game Object that is an energy counter.
   This class defines the properties of this game object and also responsible for updating the current energy
   on the screen.
   The current amount of energy is a characteristic of the avatar object. 
   We add to the avatar class a private field of counter wich initilaize alywas at the stament proccec to
   100(by that we didn't change the argument API) than at the Avatar update we calculate the diff beetwin the the
   counter and the real anergy and update or do not update the counter and the new class update is hiding inside
   the update function of the avatar object.




